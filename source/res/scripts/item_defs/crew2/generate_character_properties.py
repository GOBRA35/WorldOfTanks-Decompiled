# Python bytecode 2.7 (decompiled from Python 2.7)
# Embedded file name: scripts/item_defs/crew2/generate_character_properties.py
from collections import OrderedDict
import os
import typing
import xml.etree.ElementTree as ET
from xml.etree.ElementTree import Element
import nations

def indent(elem, level=0):
    TAB = '    '
    i = '\n' + level * TAB
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + TAB
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level + 1)

        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    elif level and (not elem.tail or not elem.tail.strip()):
        elem.tail = i


def _serialize_xml(write, elem, encoding, qnames, namespaces):
    tag = elem.tag
    text = elem.text
    if tag is ET.Comment:
        write('<!--%s-->' % ET._encode(text, encoding))
    elif tag is ET.ProcessingInstruction:
        write('<?%s?>' % ET._encode(text, encoding))
    else:
        tag = qnames[tag]
        if tag is None:
            if text:
                write(ET._escape_cdata(text, encoding))
            for e in elem:
                _serialize_xml(write, e, encoding, qnames, None)

        else:
            write('<' + tag)
            items = elem.items()
            if items or namespaces:
                if namespaces:
                    for v, k in sorted(namespaces.items(), key=lambda x: x[1]):
                        if k:
                            k = ':' + k
                        write(' xmlns%s="%s"' % (k.encode(encoding), ET._escape_attrib(v, encoding)))

                for k, v in items:
                    if isinstance(k, ET.QName):
                        k = k.text
                    if isinstance(v, ET.QName):
                        v = qnames[v.text]
                    else:
                        v = ET._escape_attrib(v, encoding)
                    write(' %s="%s"' % (qnames[k], v))

            if text or len(elem):
                write('>')
                if text:
                    write(ET._escape_cdata(text, encoding))
                for e in elem:
                    _serialize_xml(write, e, encoding, qnames, None)

                write('</' + tag + '>')
            else:
                write(' />')
    if elem.tail:
        write(ET._escape_cdata(elem.tail, encoding))
    return


ET._serialize_xml = _serialize_xml
SEX_OLD_TO_NEW = {'male': 'MALE',
 'female': 'FEMALE'}

class ConvertableTankman(object):
    __slots__ = ('group', 'nation', 'characterIDs')

    def __init__(self):
        self.group = None
        self.nation = None
        self.characterIDs = None
        return

    def isMatching(self, group, nation, characterIDs, forGroupComment):
        if group != self.group:
            return False
        elif self.nation is not None and nation != self.nation:
            return False
        elif forGroupComment:
            return True
        else:
            return False if self.characterIDs is not None and characterIDs != self.characterIDs else True


class NationalPoolsGenerator(object):

    @classmethod
    def generateNationalPools(cls):
        for nation in nations.NAMES:
            cls._generateNationalPool(nation)

    @classmethod
    def _isVipGroup(cls, groupType, groupName):
        return not ('normalGroups' == groupType and 'men1' == groupName or 'premiumGroups' == groupType and 'women1' == groupName)

    @classmethod
    def _generateNationalPool(cls, nation):
        INPUT_TANKMEN_PATH = '../tankmen/{}.xml'.format(nation)
        OUTPUT_PATH = 'character_properties/{}.xml'.format(nation)
        tankmenTree = ET.parse(INPUT_TANKMEN_PATH)
        tankmenRoot = tankmenTree.getroot()
        rootAttr = OrderedDict()
        rootAttr['xmlns:xsi'] = 'http://www.w3.org/2001/XMLSchema-instance'
        rootAttr['xsi:noNamespaceSchemaLocation'] = '../../../development/xml_schema/crew2/character_property_pool.xsd'
        commentR = ET.Comment(' This file was automatically generated by {} '.format(os.path.basename(__file__)))
        crew2Root = ET.Element('root', attrib=rootAttr)
        crew2Root.append(commentR)
        cls._output = ET.SubElement(crew2Root, 'properties')
        for groupType in ('normalGroups', 'premiumGroups'):
            elemGroups = tankmenRoot.find(groupType)
            for elGroup in elemGroups:
                groupName = elGroup.tag
                isVipGroup = cls._isVipGroup(groupType, groupName)
                commentG = ET.Comment(' {} "{}" '.format(groupType[:-1], groupName))
                cls._output.append(commentG)
                oldGender = elGroup.find('sex').text.strip()
                gender = SEX_OLD_TO_NEW[oldGender]
                for elem in elGroup.find('firstNames'):
                    nameID = elem.tag[1:]
                    locale = elem.text.strip()
                    attrs = OrderedDict()
                    attrs['id'] = nameID
                    attrs['gender'] = gender
                    attrs['locale'] = locale
                    if isVipGroup:
                        attrs['vip'] = 'true'
                    ET.SubElement(cls._output, 'firstName', attrib=attrs)

                for elem in elGroup.find('lastNames'):
                    nameID = elem.tag[1:]
                    locale = elem.text.strip()
                    attrs = OrderedDict()
                    attrs['id'] = nameID
                    attrs['gender'] = gender
                    attrs['locale'] = locale
                    if isVipGroup:
                        attrs['vip'] = 'true'
                    ET.SubElement(cls._output, 'secondName', attrib=attrs)

                for elem in elGroup.find('icons'):
                    iconID = elem.tag[1:]
                    icon = elem.text.strip()
                    icon = icon.replace('-', '_').split('.')[0]
                    attrs = OrderedDict()
                    attrs['id'] = iconID
                    attrs['gender'] = gender
                    attrs['icon'] = icon
                    if isVipGroup:
                        attrs['vip'] = 'true'
                    ET.SubElement(cls._output, 'portrait', attrib=attrs)

        indent(crew2Root)
        crew2Tree = ET.ElementTree(crew2Root)
        crew2Tree.write(OUTPUT_PATH, xml_declaration=True, encoding='utf-8', method='xml')


if __name__ == '__main__':
    NationalPoolsGenerator.generateNationalPools()
